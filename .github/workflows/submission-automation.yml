name: Submission Issue Automation

on:
  issues:
    types: [opened, closed, edited]

permissions:
  contents: write
  issues: write
  
concurrency:
  group: hackathon-automation-global
  cancel-in-progress: false

jobs:
  process-submission:
    runs-on: ubuntu-latest
    if: |
      (github.event.action == 'opened' && startsWith(github.event.issue.title, 'Submission')) ||
      (github.event.action == 'closed' && github.event.issue.state_reason == 'completed' && startsWith(github.event.issue.title, 'Submission') && github.actor != 'github-actions[bot]') ||
      (github.event.action == 'edited' && startsWith(github.event.issue.title, 'Submission'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Submission Info, Create Project Folder and Update Table
        id: extract-submission
        run: |
          # 捕获脚本输出和错误信息
          node materials/scripts/submission_extract.js 2>&1 | tee script_output.log
          SCRIPT_EXIT_CODE=$?
          
          echo "脚本退出码: $SCRIPT_EXIT_CODE"
          
          if [ $SCRIPT_EXIT_CODE -eq 0 ]; then
            # 脚本执行成功
            echo "script_success=true" >> $GITHUB_OUTPUT
            echo "✅ 脚本执行成功"
          else
            # 脚本执行失败，提取错误信息
            echo "script_success=false" >> $GITHUB_OUTPUT
            if grep -q "ERROR_MESSAGE:" script_output.log; then
              ERROR_MSG=$(grep "ERROR_MESSAGE:" script_output.log | sed 's/ERROR_MESSAGE: //')
              echo "error_message=$ERROR_MSG" >> $GITHUB_OUTPUT
            else
              echo "error_message=❌ **处理失败**\n\n处理过程中发生未知错误，请检查提交格式是否正确。" >> $GITHUB_OUTPUT
            fi
            echo "❌ 脚本执行失败"
            exit 1
          fi
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
          ISSUE_USER: ${{ github.event.issue.user.login }}
          GITHUB_OUTPUT: ${{ github.output }}

      - name: Handle Script Errors
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.payload.issue.number;
            
            // 从步骤输出中获取错误信息
            const errorMessage = steps.extract-submission.outputs.error_message || '❌ **处理失败**\n\n处理过程中发生未知错误，请检查提交格式是否正确。';
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: errorMessage
            });
            
            console.log(`❌ 错误已通过评论告知用户: Issue #${issue_number}`);

      - name: Commit & Push Changes
        if: steps.extract-submission.outputs.script_success == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          
          # 获取最新代码，但保留本地更改
          git fetch origin main
          git merge origin/main --no-edit || true
          
          # 添加所有更改
          git add .
          
          # 检查是否有更改需要提交
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            # 提交更改
            git commit -m "Add submission from ${{ github.event.issue.user.login }}"
            # 推送更改
            git push origin HEAD:main
            echo "✅ 项目提交已成功提交"
          fi

      - name: Comment and close issue
        if: steps.extract-submission.outputs.script_success == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.payload.issue.number;
            const user = context.payload.issue.user.login;
            
            try {
              // 添加成功处理的评论
              let actionType = 'Manual';
              if (context.payload.action === 'opened') {
                actionType = 'Auto';
              } else if (context.payload.action === 'edited') {
                actionType = 'Edit';
              }
              
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body: `✅ Submission processed successfully! (${actionType})`
              });
              
              // 在自动触发或编辑时关闭 issue
              if (context.payload.action === 'opened' || context.payload.action === 'edited') {
                await github.rest.issues.update({
                  owner,
                  repo,
                  issue_number,
                  state: 'closed',
                  state_reason: 'completed'
                });
              }
              
              console.log(`✅ Issue #${issue_number} processed and closed successfully`);
            } catch (error) {
              console.error(`Error processing issue: ${error.message}`);
              core.setFailed(`Error processing issue: ${error.message}`);
            } 